[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "alo-backend"
version = "0.1.0"
description = "Automated Life Organizer - Backend API"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "fastapi>=0.68.0,<0.69.0",
    "uvicorn>=0.15.0,<0.16.0",
    "sqlalchemy>=1.4.0,<2.0.0",
    "psycopg2-binary>=2.9.0,<3.0.0",
    "alembic>=1.7.0,<2.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "python-multipart>=0.0.5,<0.0.6",
    "python-dotenv>=0.19.0,<0.20.0",
    "pydantic>=1.8.0,<2.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "email-validator>=1.1.3,<2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.5,<7.0.0",
    "pytest-cov>=2.12.1,<3.0.0",
    "pytest-asyncio>=0.15.1,<0.16.0",
    "httpx>=0.19.0,<0.20.0",
    "black>=21.12b0,<22.0.0",
    "isort>=5.10.1,<6.0.0",
    "flake8>=4.0.1,<5.0.0",
    "mypy>=0.931,<1.0.0",
    "ipython>=8.0.1,<9.0.0",
    "ipdb>=0.13.9,<0.14.0",
    "mkdocs>=1.3.0,<2.0.0",
    "mkdocs-material>=8.1.11,<9.0.0",
    "mkdocstrings[python]>=0.18.0,<0.19.0",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
skip = ["build", "dist", ".git", ".mypy_cache", ".pytest_cache", ".venv"]
known_first_party = ["app"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = "-v --cov=app --cov-report=term-missing --asyncio-mode=auto"

[tool.coverage.run]
source = ["app"]
omit = ["app/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
